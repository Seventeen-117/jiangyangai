# 快速构建版Dockerfile - 针对中国网络环境优化
# 此版本使用国内镜像源并采用多种加速技术，适用于:
# 1. 网络环境不稳定的情况
# 2. 需要快速构建的环境
# 3. 使用阿里云/华为云等中国云服务的场景

#######################
# Build stage - 优化构建阶段
#######################
FROM eclipse-temurin:17-jdk-jammy AS build

WORKDIR /app

# 设置Maven配置以加速依赖下载
ENV MAVEN_OPTS="-XX:+TieredCompilation -XX:TieredStopAtLevel=1"

# 支持本地Maven仓库缓存
ARG MAVEN_REPO=/root/.m2/repository
RUN mkdir -p /root/.m2 && mkdir -p ${MAVEN_REPO}
VOLUME ["${MAVEN_REPO}:/root/.m2/repository"]

# 创建settings.xml使用多个国内镜像源
COPY <<-'EOT' /root/.m2/settings.xml
<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" 
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
  <mirrors>
    <mirror>
      <id>aliyun</id>
      <mirrorOf>central</mirrorOf>
      <name>Aliyun Maven Central</name>
      <url>https://maven.aliyun.com/repository/central</url>
    </mirror>
    <mirror>
      <id>aliyun-spring</id>
      <mirrorOf>spring</mirrorOf>
      <name>Aliyun Spring</name>
      <url>https://maven.aliyun.com/repository/spring</url>
    </mirror>
    <mirror>
      <id>aliyun-spring-plugin</id>
      <mirrorOf>spring-plugin</mirrorOf>
      <name>Aliyun Spring-plugin</name>
      <url>https://maven.aliyun.com/repository/spring-plugin</url>
    </mirror>
    <mirror>
      <id>huaweicloud</id>
      <mirrorOf>*,!aliyun,!aliyun-spring,!aliyun-spring-plugin</mirrorOf>
      <name>Huawei Cloud</name>
      <url>https://mirrors.huaweicloud.com/repository/maven/</url>
    </mirror>
  </mirrors>
  <profiles>
    <profile>
      <id>defaultProfile</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
      <repositories>
        <repository>
          <id>aliyun</id>
          <url>https://maven.aliyun.com/repository/public</url>
          <releases>
            <enabled>true</enabled>
          </releases>
          <snapshots>
            <enabled>true</enabled>
            <updatePolicy>always</updatePolicy>
          </snapshots>
        </repository>
      </repositories>
    </profile>
  </profiles>
</settings>
EOT

# 优化步骤1：仅复制必要文件用于依赖解析
COPY pom.xml .
COPY mvnw .
COPY .mvn .mvn
RUN chmod +x ./mvnw

# 添加jakarta.annotation-api依赖，解决PostConstruct问题
RUN echo '<dependency><groupId>jakarta.annotation</groupId><artifactId>jakarta.annotation-api</artifactId><version>2.1.1</version></dependency>' > /tmp/dependency.xml && \
    sed -i '/<dependencies>/r /tmp/dependency.xml' pom.xml

# 优化步骤2：预下载依赖但不构建，使用更高的容错性参数
RUN ./mvnw dependency:resolve -DskipTests \
    -Dmaven.wagon.http.retryHandler.count=10 \
    -Dmaven.wagon.http.connectTimeout=120000 \
    -Dmaven.wagon.http.readTimeout=120000 \
    -T 1C

# 优化步骤3：复制源代码后进行构建
COPY src src

# 修正Maven构建命令，确保生成可执行JAR
RUN ./mvnw clean package spring-boot:repackage -DskipTests -Dmaven.test.skip=true \
    -Dmaven.wagon.http.retryHandler.count=10 \
    -Dmaven.wagon.http.connectTimeout=120000 \
    -Dmaven.wagon.http.readTimeout=120000 \
    -T 1C

# 验证JAR文件是否正确生成
RUN ls -la target/*.jar && \
    echo "JAR文件大小:" && du -h target/*.jar && \
    echo "验证JAR文件清单:" && (jar -tvf target/*.jar | grep -i "bgai\|main" || echo "找不到主类，但JAR文件已创建")

# 复制分布式事务配置文件
COPY src/main/resources/registry.conf /app/registry.conf
COPY src/main/resources/file.conf /app/file.conf

# 复制启动脚本
COPY entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

#######################
# Runtime stage - 优化运行阶段
#######################
FROM eclipse-temurin:17-jre-jammy

WORKDIR /app

# 安装必要工具
RUN apt-get update && apt-get install -y wget && rm -rf /var/lib/apt/lists/*

# 复制JAR包 - 使用明确的文件名
COPY --from=build /app/target/bgai-*.jar /app/app.jar

# 创建非root用户并设置目录权限
RUN groupadd -r bgai && useradd -r -g bgai bgai && \
    mkdir -p /app/data /app/logs && \
    mkdir -p /app/nacos/config && \
    mkdir -p /home/bgai/logs/rocketmqlogs && \
    chown -R bgai:bgai /app && \
    chown -R bgai:bgai /home/bgai

# 复制配置文件
COPY --from=build /app/registry.conf /app/registry.conf
COPY --from=build /app/file.conf /app/file.conf
COPY --from=build /app/entrypoint.sh /app/entrypoint.sh

# 使用非root用户运行
USER bgai

# 暴露端口
EXPOSE 8688

# 环境变量
ENV SPRING_PROFILES_ACTIVE=prod \
    TZ=Asia/Shanghai \
    ROCKETMQ_HOME=/app \
    rocketmq.client.logRoot=/app/logs \
    JAVA_OPTS="-Xms512m -Xmx1g -XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxRAMPercentage=80" \
    SEATA_SAGA_STATE_MACHINE_AUTO_REGISTER=false \
    MANAGEMENT_SIMPLE_METRICS_EXPORT_ENABLED=false \
    MANAGEMENT_METRICS_ENABLE_ALL=false

# 可选：完全禁用Seata
# ENV SEATA_ENABLED=false
# ENV SAGA_ENABLED=false

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --retries=3 \
  CMD wget -q --spider http://localhost:8688/actuator/health || exit 1

# 启动命令 - 使用自定义启动脚本
ENTRYPOINT ["/app/entrypoint.sh"]

# 使用说明:
# 快速构建命令: docker build -f Dockerfile.quick -t bgai:latest .
# 挂载本地Maven仓库: docker build -f Dockerfile.quick --build-arg MAVEN_REPO=/path/to/m2/repository -t bgai:latest .
# 开发环境运行: docker run -p 8688:8688 -e SPRING_PROFILES_ACTIVE=dev bgai:latest
