# 开发环境配置

# 服务端口配置
server:
  port: 8081

spring:
  # Seata配置
  cloud:
    alibaba:
      seata:
        tx-service-group: messages-service-group
        service:
          vgroup-mapping:
            messages-service-group: default
          grouplist:
            default: 8.133.246.113:8091
        enable-auto-data-source-proxy: false
  
  # Redis配置
  data:
    redis:
      host: 8.133.246.113
      port: 6379
      password: 
      database: 0
      timeout: 5000ms
      lettuce:
        pool:
          max-active: 8
          max-wait: -1ms
          max-idle: 8
          min-idle: 0

  # RabbitMQ配置（供 Spring AMQP 与健康检查使用）
  rabbitmq:
    host: 8.133.246.113
    port: 5672
    username: guest
    password: guest
    virtual-host: /
    connection-timeout: 30s

# 开发环境日志配置
logging:
  level:
    root: INFO
    org.springframework.boot.autoconfigure: WARN
    org.springframework.boot.autoconfigure.logging: WARN
    org.springframework.boot.diagnostics: WARN
    # RocketMQ日志配置 - 开发环境启用详细日志
    org.apache.rocketmq: DEBUG
    com.jiangyang.messages: DEBUG

# Dubbo配置
dubbo:
  application:
    name: messages-service
    qos-enable: false
    # 配置唯一的缓存路径，避免多实例冲突
    metadata-type: local
    # 禁用文件缓存，使用内存缓存
    cache-file: false
    # 配置应用实例ID，确保唯一性
    environment: develop
  protocol:
    name: dubbo
    port: -1
    # 配置协议级别的缓存控制
    cache-file: false
  registry:
    address: nacos://8.133.246.113:8848
    timeout: 10000
    # 配置注册中心缓存
    cache-file: false
    # 禁用注册中心文件缓存
    file: false
    # 禁用服务发现缓存
    use-as-config-center: false
    use-as-metadata-center: false
  consumer:
    timeout: 5000
    retries: 2
    check: false
    # 禁用 monitor 过滤器，避免调用 MonitorService
    filter: -monitor,-observationsender
    # 禁用消费者缓存
    cache-file: false
    # 配置消费者元数据类型
    metadata-type: local
  provider:
    timeout: 5000
    retries: 2
    # 禁用提供者缓存
    cache-file: false
    # 配置提供者元数据类型
    metadata-type: local
    # 禁用提供者监控
    filter: -monitor,-observationsender
  # 禁用tracing和observability功能
  tracing:
    enabled: false
  observability:
    enabled: false
  # 全局配置
  config-center:
    timeout: 3000
    # 禁用配置中心文件缓存
    file: false
  # 完全禁用监控功能
  monitor:
    protocol: registry
    # 禁用监控服务
    enabled: false
    # 禁用监控过滤器
    filter: false
  # 禁用所有文件缓存
  cache:
    file:
      enabled: false
  # 禁用服务名称映射
  service-name-mapping:
    enabled: false
    # 禁用映射缓存
    cache:
      file:
        enabled: false

# Actuator配置 - 禁用数据源健康检查
management:
  health:
    db:
      enabled: false
  endpoint:
    health:
      show-details: always
      validate-group-membership: false



# Spring Boot RocketMQ自动配置 - 开发环境
# 这些属性是Spring Boot RocketMQ自动配置所必需的
rocketmq:
  name-server: 8.133.246.113:9876
  producer:
    group: jiangyang-dev-producer-group
    send-message-timeout: 3000
    retry-times-when-send-failed: 2
    retry-times-when-send-async-failed: 2
    compress-message-body-threshold: 4096
    max-message-size: 4194304
  consumer:
    group: jiangyang-dev-consumer-group
    pull-batch-size: 32
    consume-timeout: 15

# 消息服务配置 - 开发环境
message:
  service:
    # 通用消息服务配置
    common:
      default-type: rocketmq
      default-message-type: normal
      default-topic: default-topic
      
      # 消息发送配置
      send:
        async-enabled: true
        max-retries: 3
        retry-interval: 1000
        confirm-enabled: true
        confirm-timeout: 5000
      
      # 消息消费配置
      consume:
        default-mode: PUSH
        default-type: CLUSTERING
        default-order: CONCURRENT
        max-concurrency: 10
        batch-size: 100
        timeout: 30000
      
      # 重试配置
      retry:
        enabled: true
        max-retries: 3
        retry-interval: 1000
        backoff-strategy: EXPONENTIAL
        backoff-multiplier: 2.0
        max-retry-interval: 60000
      
      # 监控配置
      monitoring:
        enabled: true
        interval: 30
        verbose-logging: false
        metrics-backend: prometheus
    
    # RocketMQ配置 - 开发环境
    rocketmq:
      enabled: true
      name-server: 8.133.246.113:9876
      producer-group: jiangyang-dev-producer-group
      consumer-group: jiangyang-dev-consumer-group
      
      # 生产者配置
      producer:
        send-message-timeout: 3000
        retry-times-when-send-failed: 2
        retry-times-when-send-async-failed: 2
        compress-message-body-threshold: 4096
        max-message-size: 4194304
        vip-channel-enabled: false
        send-latency-fault-enable: false
      
      # 消费者配置
      consumer:
        pull-batch-size: 32
        consume-timeout: 15
        max-reconsume-times: 16
        message-model: CLUSTERING
        consume-from-where: CONSUME_FROM_LAST_OFFSET
        subscription: []
      
      # 主题配置
      topics:
        default: default-topic
        billing: billing-topic
        notification: notification-topic
        audit: audit-topic
      
      # 消费配置
      consume:
        mode: PUSH
        type: CLUSTERING
        order: CONCURRENT
        max-concurrency: 10
        batch-size: 100
        timeout: 30000
        retry:
          enabled: true
          max-retries: 3
          retry-interval: 1000
          backoff-strategy: EXPONENTIAL
          backoff-multiplier: 2.0
          max-retry-interval: 60000
    
    # Kafka配置 - 开发环境
    kafka:
      enabled: true
      bootstrap-servers: 8.133.246.113:9092
      security:
        protocol: PLAINTEXT
        sasl:
          mechanism: PLAIN
          username: ""
          password: ""
      consumer:
        group-id: jiangyang-dev-consumer-group
        client-id: jiangyang-dev-consumer-client
        enable-auto-commit: false
        auto-commit-interval: 1000
        session-timeout: 30000
        heartbeat-interval: 10000
        request-timeout: 40000
        retry-backoff: 1000
        max-poll-interval: 300000
        max-poll-records: 500
        max-poll-bytes: 52428800
        auto-offset-reset: latest
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      producer:
        bootstrap-servers: 8.133.246.113:9092
        acks: "1"
        batch-size: 8192
        linger-ms: 10
        buffer-memory: 16777216
        key-serializer: org.apache.kafka.common.serialization.StringSerializer
        value-serializer: org.apache.kafka.common.serialization.StringSerializer
        retries: 3
      topics:
        default-topic: default-topic
        dlq: dlq-topic
        retry: retry-topic
      consume:
        default-mode: PULL
        default-type: CLUSTERING
        default-order: CONCURRENT
        default-batch-size: 100
        default-max-retry: 3
        default-timeout: 30000
    
    # RabbitMQ配置 - 开发环境
    rabbitmq:
      enabled: false
      host: 8.133.246.113
      port: 5672
      username: guest
      password: guest
      virtual-host: /
      connection:
        timeout: 30000
        heartbeat: 30
        requested-heartbeat: 30
        requested-channel-max: 0
        requested-frame-max: 0
        connection-retry-delay: 1000
        connection-retry-timeout: 60000
        shutdown-timeout: 10000
      ssl:
        enabled: false
        key-store: ""
        key-store-password: ""
        key-store-type: JKS
        trust-store: ""
        trust-store-password: ""
        trust-store-type: JKS
        algorithm: ""
        verify-hostname: true
      publisher:
        confirm-type: NONE
        returns-enabled: false
        confirm-timeout: 5000
        return-timeout: 5000
      listener:
        simple:
          acknowledge-mode: AUTO
          auto-startup: true
          default-requeue-rejected: true
          retry:
            enabled: false
            max-attempts: 3
            initial-interval: 1000
            multiplier: 1.0
            max-interval: 10000
          concurrency: 1
          max-concurrency: 10
          prefetch: 250
          batch-size: 1
          consumer-batch-enabled: false
          idle-event-interval: 60000
          missing-queues-fatal: true
      topics:
        default: default-topic
        billing: billing-topic
        notification: notification-topic
        audit: audit-topic
      consume:
        mode: PUSH
        type: CLUSTERING
        order: CONCURRENT
        max-concurrency: 10
        batch-size: 100
        timeout: 30000
        retry:
          enabled: true
          max-retries: 3
          retry-interval: 1000
          backoff-strategy: EXPONENTIAL
          backoff-multiplier: 2.0
          max-retry-interval: 60000



